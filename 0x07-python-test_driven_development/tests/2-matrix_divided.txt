==============================
TEST FOR 2-matrix_divided MODULE
==============================

import module
::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Empty list:
::
	>>> matrix_divided([], 2)
	Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix is not a list:
::
	>>> matrix_divided({'a': [1, 2], 'b': [3, 4]}, 2)
	Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([1, 2, 3, 5], 2)
	Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix is a list not of lists:
::
	>>> matrix_divided([1, (54, 5.6), (4, 4), (1, 1)], 2)
	Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix with empty rows:
::
	>>> matrix_divided([[], [1, 2, 3], []], 2)
	Traceback (most recent call last):
        ...
	TypeError: Each row of the matrix must have the same size

Non-numeric elements in the matrix:
::
	>>> matrix_divided([[1, 2, 'a'], [4, 5, 6]], 2)
	Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix rows of different lengths:
::
	>>> matrix_divided([[1, 2, 3], [4, 5], [7, 8, 9]], 2)
        Traceback (most recent call last):
        ...
        TypeError: Each row of the matrix must have the same size

Division by zero:
::
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
        ...
        ZeroDivisionError: division by zero

Matrix with floating-point values:
::
	>>> matrix_divided([[1.5, 2.3, 3.1], [4.7, 5.9, 6.2]], 1.5)
	[[1.0, 1.53, 2.07], [3.13, 3.93, 4.13]]

Matrix containing negative values:
::
	>>> matrix_divided([[-1, -2, -3], [-4, -5, -6]], -2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
